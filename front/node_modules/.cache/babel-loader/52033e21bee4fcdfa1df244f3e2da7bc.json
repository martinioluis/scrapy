{"ast":null,"code":"import { useCallbackOne as useCallback } from 'use-memo-one';\nimport { useAsyncTask } from './use-async-task';\n\nconst createAbortError = message => {\n  try {\n    return new DOMException(message, 'AbortError');\n  } catch (e) {\n    const err = new Error(message);\n    err.name = 'AbortError';\n    return err;\n  }\n};\n\nexport const useAsyncTaskDelay = delay => useAsyncTask(useCallback((abortController, delayOverride) => new Promise((resolve, reject) => {\n  const delayToUse = delayOverride || delay;\n  const id = setTimeout(() => {\n    resolve(true);\n  }, typeof delayToUse === 'function' ? delayToUse() : delayToUse);\n  abortController.signal.addEventListener('abort', () => {\n    clearTimeout(id);\n    reject(createAbortError('timer aborted'));\n  });\n}), [delay]));","map":null,"metadata":{},"sourceType":"module"}