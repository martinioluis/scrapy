{"ast":null,"code":"import { useCallbackOne as useCallback, useMemoOne as useMemo } from 'use-memo-one';\nimport { useAsyncTask } from './use-async-task';\nimport { useMemoList } from './utils';\nexport const useAsyncCombineAll = (...asyncTasks) => {\n  const memoAsyncTasks = useMemoList(asyncTasks, (a, b) => a.start === b.start);\n  const task = useAsyncTask(useCallback(async abortController => {\n    abortController.signal.addEventListener('abort', () => {\n      memoAsyncTasks.forEach(asyncTask => {\n        asyncTask.abort();\n      });\n    }); // start everything\n\n    memoAsyncTasks.forEach(asyncTask => {\n      asyncTask.start();\n    });\n  }, [memoAsyncTasks]));\n  const taskPending = asyncTasks.some(({\n    pending\n  }) => pending);\n  const taskError = asyncTasks.find(({\n    error\n  }) => error);\n  const taskErrorAll = useMemoList(asyncTasks.map(({\n    error\n  }) => error));\n  const taskResult = useMemoList(asyncTasks.map(({\n    result\n  }) => result));\n  return useMemo(() => ({\n    start: task.start,\n    abort: task.abort,\n    started: task.started,\n    pending: taskPending,\n    error: taskError,\n    errorAll: taskErrorAll,\n    result: taskResult\n  }), [task.start, task.abort, task.started, taskPending, taskError, taskErrorAll, taskResult]);\n};","map":null,"metadata":{},"sourceType":"module"}