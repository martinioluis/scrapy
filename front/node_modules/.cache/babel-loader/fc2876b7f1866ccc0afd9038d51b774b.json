{"ast":null,"code":"import { useCallbackOne as useCallback } from 'use-memo-one';\nimport { useAsyncTask } from './use-async-task';\nimport { useAsyncRun } from './use-async-run';\nconst defaultImportObject = {};\nexport const useAsyncTaskWasm = (input, importObject = defaultImportObject) => useAsyncTask(useCallback(async (abortController, inputOverride) => {\n  const inputToUse = typeof input === 'object' && typeof inputOverride === 'object' ? { ...input,\n    ...inputOverride\n  } : inputOverride || input;\n  const response = await fetch(inputToUse, {\n    signal: abortController.signal\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  const results = await WebAssembly.instantiateStreaming(response, importObject);\n  return results.instance;\n}, [input, importObject]));\nexport const useWasm = (...args) => {\n  const asyncTask = useAsyncTaskWasm(...args);\n  useAsyncRun(asyncTask);\n  return asyncTask;\n};","map":null,"metadata":{},"sourceType":"module"}