{"ast":null,"code":"import _slicedToArray from \"/Users/martin/Documents/Programmation/projects/scrappy/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useReducer } from 'react';\nimport { useMemoOne as useMemo } from 'use-memo-one';\n\nconst createTask = (func, forceUpdate) => {\n  const task = {\n    abortController: null,\n    start: async (...args) => {\n      if (task.id === null) {\n        // already cleaned up\n        return null;\n      }\n\n      task.abort();\n      task.abortController = new AbortController();\n      const taskId = Symbol('TASK_ID');\n      task.id = taskId;\n      task.started = true;\n      task.pending = true;\n      task.error = null;\n      task.result = null;\n      forceUpdate();\n      let result = null;\n      let err = null;\n\n      try {\n        result = await func(task.abortController, ...args);\n      } catch (e) {\n        err = e;\n      }\n\n      if (task.id === taskId) {\n        task.result = result;\n        task.error = err;\n        task.started = false;\n        task.pending = false;\n        forceUpdate();\n      }\n\n      if (err) throw err;\n      return result;\n    },\n    abort: () => {\n      if (task.abortController) {\n        task.abortController.abort();\n        task.abortController = null;\n      }\n    },\n    id: 0,\n    started: false,\n    pending: true,\n    error: null,\n    result: null\n  };\n  return task;\n};\n\nexport const useAsyncTask = func => {\n  const _useReducer = useReducer(c => c + 1, 0),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        forceUpdate = _useReducer2[1];\n\n  const task = useMemo(() => createTask(func, forceUpdate), [func]);\n  useEffect(() => {\n    const cleanup = () => {\n      task.id = null;\n      task.abort();\n    };\n\n    return cleanup;\n  }, [task]);\n  return useMemo(() => ({\n    start: task.start,\n    abort: task.abort,\n    started: task.started,\n    pending: task.pending,\n    error: task.error,\n    result: task.result\n  }), [task.start, task.abort, task.started, task.pending, task.error, task.result]);\n};","map":null,"metadata":{},"sourceType":"module"}